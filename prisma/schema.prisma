// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id            String          @id @default(uuid())
  userName      String?
  email         String          @unique
  image         String?
  password      String
  role          Roles           @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Problem       Problem[]
  submission    Submission[]
  ProblemSolved ProblemSolved[]
  playlist      playlist[]
}

model Problem {
  id                 String     @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tags               String[]
  userID             String
  examples           Json
  constraints        String
  hints              String?
  editorial          String?
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User                @relation(fields: [userID], references: [id], onDelete: Cascade)
  submission        Submission[]
  solvedBy          ProblemSolved[]
  ProblemInPlaylist ProblemInPlaylist[]
}

model Submission {
  id            String   @id @default(uuid())
  userID        String
  problemID     String
  code          Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  time          String?
  memory        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user           User             @relation(fields: [userID], references: [id], onDelete: Cascade)
  problem        Problem          @relation(fields: [problemID], references: [id], onDelete: Cascade)
  testCaseResult TestCaseResult[]
}

model TestCaseResult {
  id             String   @id @default(uuid())
  submissionID   String
  testCaseIndex  Int
  stdin          String?
  stdout         String?
  stderr         String?
  compileOutput  String?
  status         String
  time           String?
  memory         String?
  passed         Boolean
  expectedOutput String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  submission Submission @relation(fields: [submissionID], references: [id], onDelete: Cascade)

  @@index([submissionID])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userID    String
  problemID String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User     @relation(fields: [userID], references: [id], onDelete: Cascade)
  Problem Problem? @relation(fields: [problemID], references: [id])

  @@unique([userID, problemID])
}

model playlist {
  id          String   @id @default(uuid())
  title       String
  description String?
  userID      String
  // code goes here
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user              User                @relation(fields: [userID], references: [id], onDelete: Cascade)
  ProblemInPlaylist ProblemInPlaylist[]

  @@unique([userID, title])
}

model ProblemInPlaylist {
  id         String   @id @default(uuid())
  playlistID String
  problemID  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  playlist playlist @relation(fields: [playlistID], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemID], references: [id], onDelete: Cascade)
}
